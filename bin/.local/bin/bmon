#!/bin/sh
#
# Dynamically manage two monitors in bspwm through rofi|dmenu.
#
# Dependencies: rofi|dmenu
#
# TODO: write this in a more "funcitonal" approach, so we can save up
#       some loc and make it clearer.

# To speed things up, pre-define variables.
BM='LVDS-1' # Builtin Monitor.
EM='HDMI-2' # External Monitor.
# This should be read from 'bspwmrc' instead of defining it here, or
# 'bswmrc' should export this variable.
DESK_NAMES='I II III IV V VI'
# Status of the laptop lid.
read -p LID_STATE < '/proc/acpi/button/lid/LID/state'

# Reset panel function
rst_pan() {
	pkill -QUIT panel
	panel &
}

# How many monitors xrandr detects.
mon_count=$(xrandr | grep -w 'connected' | wc -l)

# If bspwm started in docked mode (that is, only the external monitor is used)
# and now that external monitor is disconnected send all the desktops back
# to the builtin monitor.
if [ "$mon_count" -eq 1 ] && [ "$(bspc query -M --names)" == "$EM" ]
then
	# Turn off external monitor and on builtin monitor.
	xrandr --output "$BM" --auto --output "$EM" --off
	# bspwm doesn't allow to have monitors with zero desktops, so,
	# add dummy desktop to external monitor, so when moving 'DESK_NAMES'
	# back the external monitor has at least dummy desktop.
	bspc monitor "$EM" -a Desktop
	# For each of 'DESK_NAMES' send it back to builtin monitor.
	for i in $DESK_NAMES; do
		bspc desktop "$i" --to-monitor "$BM"
	done
	# Remove the external monitor of bspwm.
	bspc monitor "$EM" -r
	# Remove dummy desktop of builtin monitor (this was created
	# automatically by bspwm when turning on builtin monitor with xrandr).
	bspc desktop Desktop -r
	# Reorder desktops on builtin monitor.
	bspc monitor "$BM" -o "$DESK_NAMES"
	# Reset wallpaper, keyboard layouts and exit with no errors.
	walp; kbd; rst_pan; exit 0
# If the script it's called when builtin monitor it's detected
# by bspwm and the laptop lid is closed, then, use the external monitor.
# elif [ "$LID_STATE" == "closed" ] && [ "$(bspc query -M --names)" == "$BM" ]; then
# 		xrandr --output "$BM" --off --output "$EM" --auto
# 		bspc monitor "$BM" -a Desktop
# 		for i in $DESK_NAMES; do
# 			bspc desktop "$i" --to-monitor "$EM"
# 		done
# 		bspc monitor "$BM" -r; bspc desktop Desktop -r
# 		bspc monitor "$EM" -o "$DESK_NAMES"
# 		walp; kbd; exit 0;
fi

# If bspwm did not started in docked mode ask for what to do. Pass the next
# options to demnu|rofi and save the choice in 'selection' variable:
# Builtin:         Move all or half of the desktops back to builtin monitor.
# External:        Move all desktops to external monitor.
# Extend to right: Move last three desktops to the right external monitor.
selection=$(printf "%s\n%s\n%s" "Builtin" "External" \
	"Extend to right" | rofi -show -dmenu -i -l 3 -p "Monitor")

# Match 'selection' in any of the following cases.
case $selection in
	"Builtin"|"1")
		xrandr --output "$BM" --auto --output "$EM" --off
		bspc monitor "$EM" -a Desktop
		# If builtin monitor only has one desktop (dummy), pass
		# back all the desktops to builtin monitor.
		if [ "$(bspc query -D -m $BM --names | wc -l)" -le 1 ]; then
			for i in $DESK_NAMES; do
				bspc desktop "$i" --to-monitor "$BM"
			done
		# If builtin monitor has more than one desktop, pass the last
		# three desktops of 'DESK_NAMES' back to builtin monitor.
		else
			for i in $(printf "%s" "$DESK_NAMES" | cut -d' ' -f 4-6)
			do
				bspc desktop "$i" --to-monitor "$BM"
			done
		fi
		bspc monitor "$EM" -r
		bspc monitor "$BM" -o "$DESK_NAMES"
		bspc desktop Desktop -r
		walp; kbd; rst_pan; exit 0
		;;
	"External"|"2")
		xrandr --output "$BM" --off --output "$EM" --auto
		bspc monitor "$BM" -a Desktop
		for i in $DESK_NAMES; do
			bspc desktop "$i" --to-monitor "$EM"
		done
		bspc monitor "$BM" -r; bspc desktop Desktop -r
		bspc monitor "$EM" -o "$DESK_NAMES"
		walp; kbd; rst_pan; exit 0;
		;;
	"Extend to right"|"3")
		xrandr --output "$EM" --auto --right-of "$BM" --auto
		# Pass to external monitor the last three desktops
		# of 'DESK_NAMES'.
		for i in $(printf "%s" "$DESK_NAMES" | cut -d' ' -f 4-6); do
			bspc desktop "$i" --to-monitor "$EM"
		done
		bspc desktop Desktop -r
		walp; kbd; rst_pan; exit 0;
		;;
	# If no match in 'selection' exit with error status.
	*) exit 1 ;;
esac
